# -*- coding: utf-8 -*-
"""Multi Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nHzcrayOsBweyuH6xlgVGJEgOZkU59MV
"""

!pip install gradio

pip install --upgrade gradio

import gradio as gr
import requests
import os

# Set up SerpAPI Key
os.environ["SERP_API_KEY"] = "ac2119a8dca671bf7ba15c0127d57a9116a1c66eec26a573278d18b2b7ff35f2"
SERP_API_KEY = os.getenv("SERP_API_KEY")

# Function to fetch results using SerpAPI
def serpapi_search(query):
    url = "https://serpapi.com/search"
    params = {
        "q": query,
        "api_key": SERP_API_KEY,
    }
    response = requests.get(url, params=params)
    response.raise_for_status()  # Raise an error for failed requests
    return response.json()

# Function to extract relevant search results with snippets (information instead of just links)
def get_search_results(query):
    results = serpapi_search(query)
    search_results = results.get("organic_results", [])

    if not search_results:
        return "No results found."

    # Extracting the snippet (information) with clickable links
    search_info = []
    for result in search_results:
        title = result.get('title', 'No title')
        link = result.get('link', '#')
        snippet = result.get('snippet', 'No description available')  # Extracting the snippet
        search_info.append(f"<b>{title}</b>: {snippet} <br><a href='{link}' target='_blank'>{link}</a>")

    return "<br><br>".join(search_info)

# Function to extract company industry
def search_company_industry(company_name):
    query = f"{company_name} industry or business sector"
    results = get_search_results(query)

    # Check for industry-related info in the search results
    if not results:
        return "Industry not found"

    # Return the first result as the industry (simplified)
    return results.split("<br>")[0]  # Simplified; can be improved by parsing multiple results

# Function to search for datasets (on Kaggle, HuggingFace, GitHub, etc.)
def search_for_datasets(query):
    kaggle_query = f"{query} site:kaggle.com"
    huggingface_query = f"{query} site:huggingface.co"
    github_query = f"{query} site:github.com"

    kaggle_results = get_search_results(kaggle_query)
    huggingface_results = get_search_results(huggingface_query)
    github_results = get_search_results(github_query)

    # Increase font size for the dataset headings
    kaggle_heading = "<span style='font-size:30px;'>Kaggle Datasets:</span><br>"
    huggingface_heading = "<span style='font-size:30px;'>HuggingFace Datasets:</span><br>"
    github_heading = "<span style='font-size:30px;'>GitHub Datasets:</span><br>"

    # Combine dataset results with increased font size for headings
    dataset_results = f"<b>Relevant Datasets</b><br>{kaggle_heading}{kaggle_results}<br><br>{huggingface_heading}{huggingface_results}<br><br>{github_heading}{github_results}"

    return dataset_results

# Function to update the font size for specified headings
def increase_font_size(text, font_size="24px"):
    return f"<span style='font-size:{font_size};'>{text}</span>"

# Define the multi-agent class
class MarketResearchCrew:
    def __init__(self, company_name=None):
        self.company_name = company_name
        self.industry = self.auto_determine_industry()  # Automatically determine industry

    def auto_determine_industry(self):
        # Automatically determine the industry based on the company name
        return search_company_industry(self.company_name)

    def research_agent(self):
        query = f"{self.company_name} company overview" if self.company_name else f"{self.industry} industry trends"
        results = get_search_results(query)
        # Increase font size for the header
        return f"{increase_font_size('<b>Research Agent Results</b>', '30px')}<br>{results}"

    def market_analysis_agent(self):
        query = f"{self.industry} industry AI ML automation trends"
        results = get_search_results(query)
        # Increase font size for the header
        return f"{increase_font_size('<b>Market Analysis Agent Results</b>', '30px')}<br>{results}"

    def use_case_generation_agent(self):
        query1 = f"AI ML automation use cases in {self.industry}, case studies, and industry applications"
        results1 = get_search_results(query1)

        query2 = f"Top AI ML applications in {self.company_name}"
        results2 = get_search_results(query2)

        full_results = f"{increase_font_size('<b>Industry Use Cases</b>', '30px')}<br>{results1}<br><br>{increase_font_size('<b>Company Use Cases</b>', '30px')}<br>{results2}"
        # Increase font size for the header
        return f"{increase_font_size('<b>Use Case Generation Agent Results</b>', '30px')}<br>{full_results}"

    def dataset_agent(self):
        # Search for datasets related to AI ML automation in the industry
        dataset_results = search_for_datasets(self.industry)
        # Increase font size for the header
        return f"{increase_font_size('<b>Relevant Datasets</b>', '30px')}<br>{dataset_results}"

    def run_crew(self):
        # Collect outputs from all agents
        research_report = self.research_agent()
        market_analysis_report = self.market_analysis_agent()
        use_case_report = self.use_case_generation_agent()
        dataset_report = self.dataset_agent()

        # Combine and format the final report with HTML for Gradio
        full_report = (
            f"<center><h1>Market Research Report</h1></center>"
            f"<h2>Company: {self.company_name}</h2>"
            f"<h2>Industry: {self.industry}</h2><br>"
            f"{research_report}<br><br>"
            f"{market_analysis_report}<br><br>"
            f"{use_case_report}<br><br>"
            f"{dataset_report}"
        )

        return full_report

# Gradio integration
def generate_report(company_name):
    crew = MarketResearchCrew(company_name=company_name)
    report = crew.run_crew()
    return report

# Gradio interface
interface = gr.Interface(
    fn=generate_report,
    inputs=gr.Textbox(label="Enter Company Name"),
    outputs=gr.HTML(label="Market Research Report"),
    title="Market Research Generator",
    description="Enter the company name to generate a detailed market research report. Clickable links included in the output.",
)

# Launch Gradio interface
if __name__ == "__main__":
    interface.launch()

